diff --git a/tools/libxl/libxl_sched.c b/tools/libxl/libxl_sched.c
index 7c53dc60e6..9879dc7c15 100644
--- a/tools/libxl/libxl_sched.c
+++ b/tools/libxl/libxl_sched.c
@@ -289,7 +289,7 @@ int libxl_sched_credit_params_get(libxl_ctx *ctx, uint32_t poolid,
         goto out;
     }
 
-    scinfo->tslice_ms = sparam.tslice_ms;
+    scinfo->tslice_us = sparam.tslice_us;
     scinfo->ratelimit_us = sparam.ratelimit_us;
     scinfo->vcpu_migr_delay_us = sparam.vcpu_migr_delay_us;
 
@@ -306,8 +306,8 @@ int libxl_sched_credit_params_set(libxl_ctx *ctx, uint32_t poolid,
     int r, rc;
     GC_INIT(ctx);
 
-    if (scinfo->tslice_ms <  XEN_SYSCTL_CSCHED_TSLICE_MIN
-        || scinfo->tslice_ms > XEN_SYSCTL_CSCHED_TSLICE_MAX) {
+    if (scinfo->tslice_us <  XEN_SYSCTL_CSCHED_TSLICE_MIN
+        || scinfo->tslice_us > XEN_SYSCTL_CSCHED_TSLICE_MAX) {
         LOG(ERROR, "Time slice out of range, valid range is from %d to %d",
             XEN_SYSCTL_CSCHED_TSLICE_MIN, XEN_SYSCTL_CSCHED_TSLICE_MAX);
         rc = ERROR_INVAL;
@@ -317,7 +317,7 @@ int libxl_sched_credit_params_set(libxl_ctx *ctx, uint32_t poolid,
     if (rc) {
         goto out;
     }
-    if (scinfo->ratelimit_us > scinfo->tslice_ms*1000) {
+    if (scinfo->ratelimit_us > scinfo->tslice_us) {
         LOG(ERROR, "Ratelimit cannot be greater than timeslice");
         rc = ERROR_INVAL;
         goto out;
@@ -329,7 +329,7 @@ int libxl_sched_credit_params_set(libxl_ctx *ctx, uint32_t poolid,
         goto out;
     }
 
-    sparam.tslice_ms = scinfo->tslice_ms;
+    sparam.tslice_us = scinfo->tslice_us;
     sparam.ratelimit_us = scinfo->ratelimit_us;
     sparam.vcpu_migr_delay_us = scinfo->vcpu_migr_delay_us;
 
@@ -340,7 +340,7 @@ int libxl_sched_credit_params_set(libxl_ctx *ctx, uint32_t poolid,
         goto out;
     }
 
-    scinfo->tslice_ms = sparam.tslice_ms;
+    scinfo->tslice_us = sparam.tslice_us;
     scinfo->ratelimit_us = sparam.ratelimit_us;
     scinfo->vcpu_migr_delay_us = sparam.vcpu_migr_delay_us;
 
diff --git a/tools/libxl/libxl_types.idl b/tools/libxl/libxl_types.idl
index b685ac47ac..3267f6f758 100644
--- a/tools/libxl/libxl_types.idl
+++ b/tools/libxl/libxl_types.idl
@@ -1097,7 +1097,7 @@ libxl_pcitopology = Struct("pcitopology", [
     ], dir=DIR_OUT)
 
 libxl_sched_credit_params = Struct("sched_credit_params", [
-    ("tslice_ms", integer),
+    ("tslice_us", integer),
     ("ratelimit_us", integer),
     ("vcpu_migr_delay_us", integer),
     ], dispose_fn=None)
diff --git a/tools/xl/xl_cmdtable.c b/tools/xl/xl_cmdtable.c
index 89716badcb..04ff6eb782 100644
--- a/tools/xl/xl_cmdtable.c
+++ b/tools/xl/xl_cmdtable.c
@@ -259,6 +259,7 @@ struct cmd_spec cmd_table[] = {
       "-c CAP, --cap=CAP                 Cap (int)\n"
       "-s         --schedparam           Query / modify scheduler parameters\n"
       "-t TSLICE, --tslice_ms=TSLICE     Set the timeslice, in milliseconds\n"
+      "-u TSLICE, --tslice_us=TSLICE     Set the timeslice, in microseconds\n"
       "-r RLIMIT, --ratelimit_us=RLIMIT  Set the scheduling rate limit, in microseconds\n"
       "-m DLY, --migration_delay_us=DLY  Set the migration delay, in microseconds\n"
       "-p CPUPOOL, --cpupool=CPUPOOL     Restrict output to CPUPOOL"
diff --git a/tools/xl/xl_sched.c b/tools/xl/xl_sched.c
index 73cd7040cd..205003ff36 100644
--- a/tools/xl/xl_sched.c
+++ b/tools/xl/xl_sched.c
@@ -172,9 +172,9 @@ static int sched_credit_pool_output(uint32_t poolid)
         printf("Cpupool %s: [sched params unavailable]\n",
                poolname);
     } else {
-        printf("Cpupool %s: tslice=%dms ratelimit=%dus migration-delay=%dus\n",
+        printf("Cpupool %s: tslice=%dus ratelimit=%dus migration-delay=%dus\n",
                poolname,
-               scparam.tslice_ms,
+               scparam.tslice_us,
                scparam.ratelimit_us,
                scparam.vcpu_migr_delay_us);
     }
@@ -481,13 +481,14 @@ int main_sched_credit(int argc, char **argv)
         {"cap", 1, 0, 'c'},
         {"schedparam", 0, 0, 's'},
         {"tslice_ms", 1, 0, 't'},
+        {"tslice_us", 1, 0, 'u'},
         {"ratelimit_us", 1, 0, 'r'},
         {"migration_delay_us", 1, 0, 'm'},
         {"cpupool", 1, 0, 'p'},
         COMMON_LONG_OPTS
     };
 
-    SWITCH_FOREACH_OPT(opt, "d:w:c:p:t:r:m:s", opts, "sched-credit", 0) {
+    SWITCH_FOREACH_OPT(opt, "d:w:c:p:t:u:r:m:s", opts, "sched-credit", 0) {
     case 'd':
         dom = optarg;
         break;
@@ -500,6 +501,10 @@ int main_sched_credit(int argc, char **argv)
         opt_c = true;
         break;
     case 't':
+        tslice = strtol(optarg, NULL, 10) * 1000;
+        opt_t = true;
+        break;
+    case 'u':
         tslice = strtol(optarg, NULL, 10);
         opt_t = true;
         break;
@@ -555,7 +560,7 @@ int main_sched_credit(int argc, char **argv)
                 return EXIT_FAILURE;
 
             if (opt_t)
-                scparam.tslice_ms = tslice;
+                scparam.tslice_us = tslice;
 
             if (opt_r)
                 scparam.ratelimit_us = ratelimit;
diff --git a/xen/common/sched_credit.c b/xen/common/sched_credit.c
index 3abe20def8..70ecd5d3a8 100644
--- a/xen/common/sched_credit.c
+++ b/xen/common/sched_credit.c
@@ -48,8 +48,8 @@
 #define CSCHED_DEFAULT_WEIGHT       256
 #define CSCHED_TICKS_PER_TSLICE     3
 /* Default timeslice: 30ms */
-#define CSCHED_DEFAULT_TSLICE_MS    30
-#define CSCHED_CREDITS_PER_MSEC     10
+#define CSCHED_DEFAULT_TSLICE_US    30000
+#define CSCHED_CREDITS_PER_USEC     1
 /* Never set a timer shorter than this value. */
 #define CSCHED_MIN_TIMER            XEN_SYSCTL_SCHED_RATELIMIT_MIN
 
@@ -140,8 +140,8 @@
 /*
  * Boot parameters
  */
-static int __read_mostly sched_credit_tslice_ms = CSCHED_DEFAULT_TSLICE_MS;
-integer_param("sched_credit_tslice_ms", sched_credit_tslice_ms);
+static int __read_mostly sched_credit_tslice_us = CSCHED_DEFAULT_TSLICE_US;
+integer_param("sched_credit_tslice_us", sched_credit_tslice_us);
 
 /*
  * Physical CPU
@@ -334,12 +334,12 @@ static void burn_credits(struct csched_vcpu *svc, s_time_t now)
     if ( (delta = now - svc->start_time) <= 0 )
         return;
 
-    val = delta * CSCHED_CREDITS_PER_MSEC + svc->residual;
-    svc->residual = do_div(val, MILLISECS(1));
+    val = delta * CSCHED_CREDITS_PER_USEC + svc->residual;
+    svc->residual = do_div(val, MICROSECS(1));
     credits = val;
     ASSERT(credits == val); /* make sure we haven't truncated val */
     atomic_sub(credits, &svc->credit);
-    svc->start_time += (credits * MILLISECS(1)) / CSCHED_CREDITS_PER_MSEC;
+    svc->start_time += (credits * MICROSECS(1)) / CSCHED_CREDITS_PER_USEC;
 }
 
 static bool_t __read_mostly opt_tickle_one_idle = 1;
@@ -1242,14 +1242,14 @@ csched_aff_cntl(const struct scheduler *ops, struct vcpu *v,
 }
 
 static inline void
-__csched_set_tslice(struct csched_private *prv, unsigned int timeslice_ms)
+__csched_set_tslice(struct csched_private *prv, unsigned int timeslice_us)
 {
-    prv->tslice = MILLISECS(timeslice_ms);
+    prv->tslice = MICROSECS(timeslice_us);
     prv->ticks_per_tslice = CSCHED_TICKS_PER_TSLICE;
-    if ( timeslice_ms < prv->ticks_per_tslice )
+    if ( timeslice_us < prv->ticks_per_tslice )
         prv->ticks_per_tslice = 1;
-    prv->tick_period_us = timeslice_ms * 1000 / prv->ticks_per_tslice;
-    prv->credits_per_tslice = CSCHED_CREDITS_PER_MSEC * timeslice_ms;
+    prv->tick_period_us = timeslice_us / prv->ticks_per_tslice;
+    prv->credits_per_tslice = CSCHED_CREDITS_PER_USEC * timeslice_us;
     prv->credit = prv->credits_per_tslice * prv->ncpus;
 }
 
@@ -1265,17 +1265,17 @@ csched_sys_cntl(const struct scheduler *ops,
     switch ( sc->cmd )
     {
     case XEN_SYSCTL_SCHEDOP_putinfo:
-        if ( params->tslice_ms > XEN_SYSCTL_CSCHED_TSLICE_MAX
-             || params->tslice_ms < XEN_SYSCTL_CSCHED_TSLICE_MIN
+        if ( params->tslice_us > XEN_SYSCTL_CSCHED_TSLICE_MAX
+             || params->tslice_us < XEN_SYSCTL_CSCHED_TSLICE_MIN
              || (params->ratelimit_us
                  && (params->ratelimit_us > XEN_SYSCTL_SCHED_RATELIMIT_MAX
                      || params->ratelimit_us < XEN_SYSCTL_SCHED_RATELIMIT_MIN))
-             || MICROSECS(params->ratelimit_us) > MILLISECS(params->tslice_ms)
+             || MICROSECS(params->ratelimit_us) > MICROSECS(params->tslice_us)
              || params->vcpu_migr_delay_us > XEN_SYSCTL_CSCHED_MGR_DLY_MAX_US )
                 goto out;
 
         spin_lock_irqsave(&prv->lock, flags);
-        __csched_set_tslice(prv, params->tslice_ms);
+        __csched_set_tslice(prv, params->tslice_us);
         if ( !prv->ratelimit && params->ratelimit_us )
             printk(XENLOG_INFO "Enabling context switch rate limiting\n");
         else if ( prv->ratelimit && !params->ratelimit_us )
@@ -1286,7 +1286,7 @@ csched_sys_cntl(const struct scheduler *ops,
 
         /* FALLTHRU */
     case XEN_SYSCTL_SCHEDOP_getinfo:
-        params->tslice_ms = prv->tslice / MILLISECS(1);
+        params->tslice_us = prv->tslice / MICROSECS(1);
         params->ratelimit_us = prv->ratelimit / MICROSECS(1);
         params->vcpu_migr_delay_us = prv->vcpu_migr_delay / MICROSECS(1);
         rc = 0;
@@ -2104,9 +2104,9 @@ csched_dump(const struct scheduler *ops)
            "\tweight             = %u\n"
            "\trunq_sort          = %u\n"
            "\tdefault-weight     = %d\n"
-           "\ttslice             = %"PRI_stime"ms\n"
+           "\ttslice             = %"PRI_stime"us\n"
            "\tratelimit          = %"PRI_stime"us\n"
-           "\tcredits per msec   = %d\n"
+           "\tcredits per usec   = %d\n"
            "\tticks per tslice   = %d\n"
            "\tmigration delay    = %"PRI_stime"us\n",
            prv->ncpus,
@@ -2116,9 +2116,9 @@ csched_dump(const struct scheduler *ops)
            prv->weight,
            prv->runq_sort,
            CSCHED_DEFAULT_WEIGHT,
-           prv->tslice / MILLISECS(1),
+           prv->tslice / MICROSECS(1),
            prv->ratelimit / MICROSECS(1),
-           CSCHED_CREDITS_PER_MSEC,
+           CSCHED_CREDITS_PER_USEC,
            prv->ticks_per_tslice,
            prv->vcpu_migr_delay/ MICROSECS(1));
 
@@ -2152,20 +2152,20 @@ csched_dump(const struct scheduler *ops)
 static int __init
 csched_global_init(void)
 {
-    if ( sched_credit_tslice_ms > XEN_SYSCTL_CSCHED_TSLICE_MAX ||
-         sched_credit_tslice_ms < XEN_SYSCTL_CSCHED_TSLICE_MIN )
+    if ( sched_credit_tslice_us > XEN_SYSCTL_CSCHED_TSLICE_MAX ||
+         sched_credit_tslice_us < XEN_SYSCTL_CSCHED_TSLICE_MIN )
     {
-        printk("WARNING: sched_credit_tslice_ms outside of valid range [%d,%d].\n"
+        printk("WARNING: sched_credit_tslice_us outside of valid range [%d,%d].\n"
                " Resetting to default %u\n",
                XEN_SYSCTL_CSCHED_TSLICE_MIN,
                XEN_SYSCTL_CSCHED_TSLICE_MAX,
-               CSCHED_DEFAULT_TSLICE_MS);
-        sched_credit_tslice_ms = CSCHED_DEFAULT_TSLICE_MS;
+               CSCHED_DEFAULT_TSLICE_US);
+        sched_credit_tslice_us = CSCHED_DEFAULT_TSLICE_US;
     }
 
-    if ( MICROSECS(sched_ratelimit_us) > MILLISECS(sched_credit_tslice_ms) )
+    if ( MICROSECS(sched_ratelimit_us) > MICROSECS(sched_credit_tslice_us) )
         printk("WARNING: sched_ratelimit_us >"
-               "sched_credit_tslice_ms is undefined\n"
+               "sched_credit_tslice_us is undefined\n"
                "Setting ratelimit to tslice\n");
 
     if ( vcpu_migration_delay_us > XEN_SYSCTL_CSCHED_MGR_DLY_MAX_US )
@@ -2209,9 +2209,9 @@ csched_init(struct scheduler *ops)
     INIT_LIST_HEAD(&prv->active_sdom);
     prv->master = UINT_MAX;
 
-    __csched_set_tslice(prv, sched_credit_tslice_ms);
+    __csched_set_tslice(prv, sched_credit_tslice_us);
 
-    if ( MICROSECS(sched_ratelimit_us) > MILLISECS(sched_credit_tslice_ms) )
+    if ( MICROSECS(sched_ratelimit_us) > MICROSECS(sched_credit_tslice_us) )
         prv->ratelimit = prv->tslice;
     else
         prv->ratelimit = MICROSECS(sched_ratelimit_us);
diff --git a/xen/include/public/sysctl.h b/xen/include/public/sysctl.h
index c49b4dcc99..a3d99b5e12 100644
--- a/xen/include/public/sysctl.h
+++ b/xen/include/public/sysctl.h
@@ -594,13 +594,13 @@ DEFINE_XEN_GUEST_HANDLE(xen_sysctl_arinc653_schedule_t);
  * Applicable to Credit and Credit2 schedulers.
  */
 #define XEN_SYSCTL_SCHED_RATELIMIT_MAX 500000
-#define XEN_SYSCTL_SCHED_RATELIMIT_MIN 100
+#define XEN_SYSCTL_SCHED_RATELIMIT_MIN 1
 
 struct xen_sysctl_credit_schedule {
     /* Length of timeslice in milliseconds */
-#define XEN_SYSCTL_CSCHED_TSLICE_MAX 1000
+#define XEN_SYSCTL_CSCHED_TSLICE_MAX 1000000
 #define XEN_SYSCTL_CSCHED_TSLICE_MIN 1
-    unsigned tslice_ms;
+    uint32_t tslice_us;
     unsigned ratelimit_us;
     /*
      * How long we consider a vCPU to be cache-hot on the
